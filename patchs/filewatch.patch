diff --git a/CMakeLists.txt b/CMakeLists.txt
index a508973..a634e52 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,37 +1,86 @@
-cmake_minimum_required(VERSION 3.1)
+cmake_minimum_required(VERSION 3.12..3.18)
 
 # Project name
-project( FileWatch VERSION 0.0.1 LANGUAGES C CXX)
-
-option(BuildTests "Build the unit tests" ON)
-enable_testing()
+project(FileWatch VERSION 0.0.1 LANGUAGES C CXX)
 
 # Enable c++11
 set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_CXX_STANDARD_REQUIRED on)
 
-# Add debug flags
-if(MSVC)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi /MP")
-else()
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
-endif()
-
-# dial up the warnings
-if(MSVC)
-  # Force to always compile with W4
-  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
-    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
-  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /permissive")
-  else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
-  endif()
-elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
-  # Update if necessary
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic")
-endif()
-
-# create and configure the unit test target
-if(BuildTests)
-    add_subdirectory(tests)
-endif()
\ No newline at end of file
+# Includes ---------------------------------------------------------------------
+include(GNUInstallDirs)
+include(CMakePackageConfigHelpers)
+
+# Target Declaration -----------------------------------------------------------
+add_library(${PROJECT_NAME} INTERFACE)
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+
+# Dependency resolving ---------------------------------------------------------
+
+# Configuration ----------------------------------------------------------------
+
+# Pacakage setting -------------------------------------------------------------
+set(PACKAGE_NAME ${PROJECT_NAME})
+set(PACKAGE_INSTALL_CMAKE_DIR   ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})
+set(PACKAGE_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
+set(PACKAGE_INSTALL_LIBRARY_DIR ${CMAKE_INSTALL_LIBDIR})
+set(PACKAGE_INSTALL_ARCHIVE_DIR ${CMAKE_INSTALL_LIBDIR})
+
+
+# Target Definition ------------------------------------------------------------
+
+target_include_directories(${PROJECT_NAME}
+    INTERFACE
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/>
+        $<INSTALL_INTERFACE:${PACKAGE_INSTALL_INCLUDE_DIR}>
+)
+
+set(${PROJECT_NAME}_PUBLIC_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/FileWatch.hpp)
+
+set_target_properties(${PROJECT_NAME}
+    PROPERTIES
+        PUBLIC_HEADER "${${PROJECT_NAME}_PUBLIC_HEADER}"
+)
+
+
+file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME}Config.cmake.in
+[=[
+@PACKAGE_INIT@
+
+include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake)
+
+check_required_components(@PROJECT_NAME@)
+]=]
+)
+
+configure_package_config_file(
+        ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME}Config.cmake.in
+        ${PACKAGE_NAME}Config.cmake
+    INSTALL_DESTINATION ${PACKAGE_INSTALL_CMAKE_DIR}
+    NO_SET_AND_CHECK_MACRO
+)
+
+write_basic_package_version_file(${PROJECT_NAME}ConfigVersion.cmake
+    COMPATIBILITY AnyNewerVersion
+)
+
+# Installations ----------------------------------------------------------------
+
+## Targets installation
+install(TARGETS ${PROJECT_NAME}
+    EXPORT          ${PROJECT_NAME}Targets
+    PUBLIC_HEADER   DESTINATION ${PACKAGE_INSTALL_INCLUDE_DIR}
+    COMPONENT       interface
+)
+
+## CMake's configurations
+install(EXPORT ${PROJECT_NAME}Targets
+    DESTINATION ${PACKAGE_INSTALL_CMAKE_DIR}
+)
+
+## Package configurations
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME}Config.cmake 
+              ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME}ConfigVersion.cmake
+    DESTINATION ${PACKAGE_INSTALL_CMAKE_DIR}
+)
